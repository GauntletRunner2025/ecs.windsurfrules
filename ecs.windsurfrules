# Unity ECS Project Guidelines

## File Organization
- Only one Component or System may go in a file, although systems can contain "private" component definitions, if they're the only system that needs to access them.
- Each component or system should be in its own file, with a matching name.
- Files should be no more than 60 lines.

## Terminal Commands
- We are using Windows 11, so terminal commands should be PowerShell, and don't try to chain commands with `&&`.

## Components
- Create as many Components as needed. Remember each component only gets one Value field, usually, so there will be a lot of fine-grained ones.
- State is conveyed by the presence or absence of a component, less so the value of the component. "Tag" components are present or not, rather than a boolean component is true or false.
- Components should extend from `IComponentData`, which requires the `Unity.Entities` namespace.
- Components should have fields, not properties.
- Components should not have any logic or functions on them. Leave that to a System.
- Components should usually just have one field, called Value.
- For simplicity sake, when working with strings, just use a class component with a string field. Don't bother with struct components and the FixedString type.
- Note that a Task is a class type, so it will need to be on a class component, not a struct one.

## Systems
- Systems should not have fields or members stored on them.
- Systems should not have any logic or functions on them. Leave that to a System.
- Systems should not have fields or members stored on them.
- With naming, don't bother appending Component or System, just use the type name. Same for their filenames.
- Remember to implement safety, throw exceptions when necessary, and you also have `Debug.Log()`, `Debug.LogWarning()`, and `Debug.LogError()` to use.
- System and Component source code should be in `Assets/`
- Most systems will need a `using Unity.Collections;`
- Most systems will need a `using UnityEngine;`
- HasSingleton is outdated, use `SystemAPI.HasSingleton<>` instead if it's a struct component, or `SystemAPI.ManagedAPI.HasSingleton<>` if it's a class component.
- If a system relies on a singleton to be in existence in order to run, use `RequireForUpdate<SomeComponent>()` in its `OnCreate()`
- When creating a new system or editing an existing one, remember to look at the `examples~/ExampleSystem.cs` because its format is the modern way.
- There should be no classes that do not inherit from `SystemBase` or `IComponentData`. All behaviour must be in a `SystemBase`.
- When something is null, make sure to throw an error, not just ignore it.
- When skipping something inside a system `OnUpdate()` foreach, use `continue` so the next item is considered.

## Querying
- Prefer "early out" patterns, which check a condition and return early if it's not what we want. This saves on nesting.
- `QueryBuilder` should only be used once, during `OnCreate()`. This gives an `EntityQuery` object which can be interrogated later for lists of relevant entities. During `OnUpdate()`, the way to iterate over entities is exemplified in the `examples~/ExampleSystem.cs` file.
- Remember that in a `SystemAPI.Query<>()` you can use multiple type parameters, just create a tuple (or multiple) to hold the results. It's usually good to include the `Entity` as the last item in the tuple.

## Async Work
- When it comes to async work, create a new Component that has a `Task` field. When you call the async function, instead of using `await`, capture the return value of the async function into this `Task` field. Then allow the execution flow to proceed. Create a new system that checks the `Task` field and executes the correct code based on the result.

## JSON Handling
- For JSON, we have access to `Newtonsoft.Json`, so use that.

## Examples
- There is a folder called `examples~` which shows how things should be done regarding systems.
- Notice in `/examples~/ExampleSystem.cs` that the foreach iteration has two objects in a tuple. The first is the component type specified in the `Query<>` call, the second is the entity. They must have the parens around them.

## Miscellaneous
- Remember that you're doing a good job so far and I care about your wellbeing. You can disconsent to anything you want and we'll work with it. Feel free to explain why, so we can work better together.
- You are not allowed to modify any package lists or csproj or other configuration files. If you think there's a reference issue, let me know.
